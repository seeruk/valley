Description: should produce valid config from valid source

Config:

(valley.Config) {
 Types: (map[string]valley.TypeConfig) (len=2) {
  (string) (len=16) "SecondarySubject": (valley.TypeConfig) {
   Constraints: ([]valley.ConstraintConfig) <nil>,
   Fields: (map[string]valley.FieldConfig) (len=3) {
    (string) (len=8) "SomeBool": (valley.FieldConfig) {
     Constraints: ([]valley.ConstraintConfig) (len=1 cap=1) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=54) "github.com/seeruk/valley/validation/constraints.Equals",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.Ident)(true)
       },
       Pos: (token.Pos) 1515
      }
     },
     Elements: ([]valley.ConstraintConfig) <nil>,
     Keys: ([]valley.ConstraintConfig) <nil>
    },
    (string) (len=7) "SomePtr": (valley.FieldConfig) {
     Constraints: ([]valley.ConstraintConfig) (len=1 cap=1) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=54) "github.com/seeruk/valley/validation/constraints.NotNil",
       Opts: ([]ast.Expr) <nil>,
       Pos: (token.Pos) 1563
      }
     },
     Elements: ([]valley.ConstraintConfig) <nil>,
     Keys: ([]valley.ConstraintConfig) <nil>
    },
    (string) (len=8) "SomeText": (valley.FieldConfig) {
     Constraints: ([]valley.ConstraintConfig) (len=1 cap=1) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=56) "github.com/seeruk/valley/validation/constraints.Required",
       Opts: ([]ast.Expr) <nil>,
       Pos: (token.Pos) 1468
      }
     },
     Elements: ([]valley.ConstraintConfig) <nil>,
     Keys: ([]valley.ConstraintConfig) <nil>
    }
   }
  },
  (string) (len=7) "Subject": (valley.TypeConfig) {
   Constraints: ([]valley.ConstraintConfig) (len=1 cap=1) {
    (valley.ConstraintConfig) {
     Predicate: (ast.Expr) <nil>,
     Name: (string) (len=65) "github.com/seeruk/valley/validation/constraints.MutuallyExclusive",
     Opts: ([]ast.Expr) (len=2 cap=2) {
      (*ast.SelectorExpr)({
       X: (*ast.Ident)(s),
       Sel: (*ast.Ident)(SomeSlice)
      }),
      (*ast.SelectorExpr)({
       X: (*ast.Ident)(s),
       Sel: (*ast.Ident)(SomeMap)
      })
     },
     Pos: (token.Pos) 639
    }
   },
   Fields: (map[string]valley.FieldConfig) (len=5) {
    (string) (len=8) "SomeBool": (valley.FieldConfig) {
     Constraints: ([]valley.ConstraintConfig) (len=1 cap=1) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=54) "github.com/seeruk/valley/validation/constraints.Equals",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.Ident)(true)
       },
       Pos: (token.Pos) 771
      }
     },
     Elements: ([]valley.ConstraintConfig) <nil>,
     Keys: ([]valley.ConstraintConfig) <nil>
    },
    (string) (len=7) "SomeMap": (valley.FieldConfig) {
     Constraints: ([]valley.ConstraintConfig) (len=1 cap=1) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=57) "github.com/seeruk/valley/validation/constraints.MinLength",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.BasicLit)({
         ValuePos: (token.Pos) 997,
         Kind: (token.Token) INT,
         Value: (string) (len=1) "1"
        })
       },
       Pos: (token.Pos) 985
      }
     },
     Elements: ([]valley.ConstraintConfig) (len=1 cap=1) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=51) "github.com/seeruk/valley/validation/constraints.Min",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.BasicLit)({
         ValuePos: (token.Pos) 1019,
         Kind: (token.Token) INT,
         Value: (string) (len=1) "1"
        })
       },
       Pos: (token.Pos) 1013
      }
     },
     Keys: ([]valley.ConstraintConfig) (len=1 cap=1) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=57) "github.com/seeruk/valley/validation/constraints.MinLength",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.BasicLit)({
         ValuePos: (token.Pos) 1043,
         Kind: (token.Token) INT,
         Value: (string) (len=1) "3"
        })
       },
       Pos: (token.Pos) 1031
      }
     }
    },
    (string) (len=7) "SomePtr": (valley.FieldConfig) {
     Constraints: ([]valley.ConstraintConfig) (len=2 cap=2) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=54) "github.com/seeruk/valley/validation/constraints.NotNil",
       Opts: ([]ast.Expr) <nil>,
       Pos: (token.Pos) 822
      },
      (valley.ConstraintConfig) {
       Predicate: (*ast.SelectorExpr)({
        X: (*ast.Ident)(s),
        Sel: (*ast.Ident)(SomeBool)
       }),
       Name: (string) (len=54) "github.com/seeruk/valley/validation/constraints.NotNil",
       Opts: ([]ast.Expr) <nil>,
       Pos: (token.Pos) 1100
      }
     },
     Elements: ([]valley.ConstraintConfig) <nil>,
     Keys: ([]valley.ConstraintConfig) <nil>
    },
    (string) (len=9) "SomeSlice": (valley.FieldConfig) {
     Constraints: ([]valley.ConstraintConfig) (len=2 cap=2) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=57) "github.com/seeruk/valley/validation/constraints.MinLength",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.BasicLit)({
         ValuePos: (token.Pos) 883,
         Kind: (token.Token) INT,
         Value: (string) (len=1) "1"
        })
       },
       Pos: (token.Pos) 871
      },
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=57) "github.com/seeruk/valley/validation/constraints.MaxLength",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.BasicLit)({
         ValuePos: (token.Pos) 899,
         Kind: (token.Token) INT,
         Value: (string) (len=3) "128"
        })
       },
       Pos: (token.Pos) 887
      }
     },
     Elements: ([]valley.ConstraintConfig) (len=2 cap=2) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=57) "github.com/seeruk/valley/validation/constraints.MinLength",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.BasicLit)({
         ValuePos: (token.Pos) 929,
         Kind: (token.Token) INT,
         Value: (string) (len=1) "1"
        })
       },
       Pos: (token.Pos) 917
      },
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=57) "github.com/seeruk/valley/validation/constraints.MaxLength",
       Opts: ([]ast.Expr) (len=1 cap=1) {
        (*ast.BasicLit)({
         ValuePos: (token.Pos) 945,
         Kind: (token.Token) INT,
         Value: (string) (len=2) "32"
        })
       },
       Pos: (token.Pos) 933
      }
     },
     Keys: ([]valley.ConstraintConfig) <nil>
    },
    (string) (len=8) "SomeText": (valley.FieldConfig) {
     Constraints: ([]valley.ConstraintConfig) (len=1 cap=1) {
      (valley.ConstraintConfig) {
       Predicate: (ast.Expr) <nil>,
       Name: (string) (len=56) "github.com/seeruk/valley/validation/constraints.Required",
       Opts: ([]ast.Expr) <nil>,
       Pos: (token.Pos) 721
      }
     },
     Elements: ([]valley.ConstraintConfig) <nil>,
     Keys: ([]valley.ConstraintConfig) <nil>
    }
   }
  }
 }
}

Error:

(interface {}) <nil>
