// Code generated by valley. DO NOT EDIT.
package primary

import (
	"strconv"

	"github.com/seeruk/valley/valley"
)

// Validate validates this Example.
// This method was generated by Valley.
func (e Example) Validate(path string) []valley.ConstraintViolation {
	var violations []valley.ConstraintViolation

	if len(e.Ints) == 0 {
		violations = append(violations, valley.ConstraintViolation{
			Field:   path + ".Ints",
			Message: "a value is required",
		})
	}

	for i, element := range e.Ints {
		if element == 0 {
			violations = append(violations, valley.ConstraintViolation{
				Field:   path + ".Ints.[" + strconv.Itoa(i) + "]",
				Message: "a value is required",
			})
		}
	}

	if len(e.Text) == 0 {
		violations = append(violations, valley.ConstraintViolation{
			Field:   path + ".Text",
			Message: "a value is required",
		})
	}

	if len(e.TextMap) == 0 {
		violations = append(violations, valley.ConstraintViolation{
			Field:   path + ".Texts",
			Message: "a value is required",
		})
	}

	violations = append(violations, e.Nested.Validate(path+".Nested")...)

	return violations
}

// Validate validates this NestedExample.
// This method was generated by Valley.
func (n NestedExample) Validate(path string) []valley.ConstraintViolation {
	var violations []valley.ConstraintViolation

	textPath := path + ".Text"

	if len(n.Text) == 0 {
		violations = append(violations, valley.ConstraintViolation{
			Field:   textPath,
			Message: "a value is required",
		})
	}

	return violations
}
