//go:generate sh -c "valley . ./primary.valley.yml > primary_validate.go"
package primary

import (
	"strconv"

	"github.com/seeruk/valley/example/secondary"
	"github.com/seeruk/valley/valley"
)

// Example ...
type Example struct {
	Text      string              `json:"text"`
	Texts     []string            `json:"texts"`
	TextMap   map[string]string   `json:"text_map"`
	Int       int                 `json:"int"`
	Ints      []int               `json:"ints"`
	Nested    NestedExample       `json:"nested"`
	Secondary secondary.Secondary `json:"secondary"`
}

// Bla ...
func (e *Example) Bla() {}

// Validate validates this Example.
// This method was generated by Valley.
func (e Example) ValidateBuffer() []valley.ConstraintViolation {
	var violations []valley.ConstraintViolation
	var in []byte

	buf := make([]byte, 0, 32)

	if len(e.Ints) == 0 {
		in = []byte(".Ints")
		buf = append(buf, in...)

		violations = append(violations, valley.ConstraintViolation{
			Field:   valley.Btos(buf),
			Message: "a value is required",
		})

		buf = buf[:len(buf)-len(in)]
	}

	for i, element := range e.Ints {
		if element == 0 {
			in = []byte(".[" + strconv.Itoa(i) + "]")
			buf = append(buf, in...)

			violations = append(violations, valley.ConstraintViolation{
				Field:   valley.Btos(buf),
				Message: "a value is required",
			})

			buf = buf[:len(buf)-len(in)]
		}
	}

	if len(e.Text) == 0 {
		in = []byte(".Text")
		buf = append(buf, in...)

		violations = append(violations, valley.ConstraintViolation{
			Field:   valley.Btos(buf),
			Message: "a value is required",
		})

		buf = buf[:len(buf)-len(in)]
	}

	if len(e.TextMap) == 0 {
		in = []byte(".TextMap")
		buf = append(buf, in...)

		violations = append(violations, valley.ConstraintViolation{
			Field:   valley.Btos(buf),
			Message: "a value is required",
		})

		buf = buf[:len(buf)-len(in)]
	}

	return violations
}

// NestedExample ...
type NestedExample struct {
	Text string `json:"text"`
}
